{"version":3,"sources":["Header/header.js","TaskItem/TaskItem.js","NextWeek/NextWeek.js","ThisWeekH/ThisWeekH.js","AllTodo/AllTodo.js","AllTodoH/AllTodoH.js","Done/Done.js","DoneH/DoneH.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","date","Date","toDateString","useState","text","setText","dueDate","setDueDate","priority","setPriority","showAlert_add","setShowAlert_add","className","id","data-toggle","type","name","defaultChecked","placeholder","onChange","event","target","value","defaultValue","onClick","console","log","addTask","show","message","onClose","TaskItem","completed","completeTask","deleteTask","NextWeek","ThisWeekH","AllTodo","AllTodoH","Done","undoTask","DoneH","Footer","href","App","tasks","setTasks","useEffect","axios","get","then","response","data","catch","error","sort","a","b","today","first","getDate","getDay","lastday","setDate","dd","String","padStart","mm","getMonth","lastDayOfWeek","getFullYear","lastdayNW","ddNW","mmNW","lastDayOfWeekNW","twTasks","filter","task","currentDueDate","nwTasks","allActiveTasks","doneTasks","delete","updatedTasks","todoId","map","i","length","put","updatedTasks_undo","path","component","exact","newTask","deleted","post","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d4f446e.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport Bootbox from 'bootbox-react';\n\nimport './Header.css';\n\nfunction Header(props) {\n\n    const date = new Date().toDateString();\n\n    //telling react that some text/date will be inputted and we need to keep track of and use that text/date.\n    //calling (\"\") as there may be nothing written in input TODO box yet\n    const [text, setText] = useState(\"\");\n    // const [currentDueDate, setCurrentDueDate] = useState(\"\");\n    const [dueDate, setDueDate] = useState(\"\");\n    const [priority, setPriority] = useState(\"\");\n\n    //onChange is used so everytime the text input field changes react will update this STATE\n    function handleTextChange(event) {\n        setText(event.target.value);\n    }\n\n    function handleDateChange(event) {\n        setDueDate(event.target.value);\n    }\n\n    // function handleDateChange(event) {\n    //     setCurrentDueDate(event.target.value);\n    // }\n\n    function handlePriority(event) {\n        setPriority(event.target.value);\n    }\n\n    function handleAddTaskClick() {\n        props.addTask(text, dueDate, priority);\n    }\n\n    //This bit of code is for the pop up alert box\n    const [showAlert_add, setShowAlert_add] = useState(false)\n    const handleClose_add = () => {\n        console.log(\"You tots closed that ALERT man!\");\n        return setShowAlert_add(false);\n    }\n    //end of pop up alert box code\n\n    function handleAddClick() {\n        // props.triggerEarthquake()\n        console.log(\"A new task has been added\")\n        setShowAlert_add(true);\n        handleAddTaskClick();\n        \n        // to remove the button from top of screen after pressed\n    }\n\n    return (\n        <Fragment>\n            <header>\n\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n\n                        <div className=\"col-lg col-lg-5 header-toggle\" id=\"header\">\n\n                            <div className=\"row header-toggle__row\">\n                                <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                                    <label className=\"btn btn-secondary toggler active\">\n                                        <input type=\"radio\" name=\"options\" id=\"option1\" /> All to'do's\n                                </label>\n                                    <label className=\"btn btn-secondary toggler\">\n                                        <input type=\"radio\" name=\"options\" id=\"option2\" />Next wk to-do's\n                                </label>\n                                    <label className=\"btn btn-secondary toggler\">\n                                        <input type=\"radio\" name=\"options\" id=\"option2\" defaultChecked />This wk to-do's\n                                </label>\n                                </div>\n                                <br></br>\n                            </div>\n                            <br></br>\n                            <div className=\"row-2\">\n                                <h1> Holly's Mega\n                            To-do List</h1><br></br>\n                            </div>\n\n                            <div className=\"row-date\">\n                                <h2><strong>{date}</strong></h2><br></br>\n                            </div>\n\n\n                        </div>\n\n                        <div className=\"col-lg col-lg-7\">\n                            <form className=\"new-todo-container\">\n                                <div className=\"row\">\n                                    <div className='col-12'>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control input-lg\"\n                                            placeholder=\"To do...\"\n                                            onChange={handleTextChange}\n                                            value={text} />\n                                    </div>\n                                </div><br></br>\n\n                                <div className=\"row\">\n                                    <div className=\"col-12 col-md-5\">\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control\"\n                                            placeholder=\"Due Date\"\n                                            onChange={handleDateChange}\n                                        // value={dueDate}\n                                        />\n                                    </div>\n                                </div>\n                                <br></br>\n                                <div className=\"row\">\n                                    <div className='col-12 col-md-5'>\n                                        <select\n                                            className=\"custom-select md-sm-2\"\n                                            id=\"inlineFormCustomSelect\"\n                                            onChange={handlePriority}\n                                            value={priority}>\n                                            <option defaultValue>Priority...</option>\n                                            <option id=\"high\" value=\"high\">High</option>\n                                            <option id=\"medium\" value=\"medium\">Medium</option>\n                                            <option id=\"low\" value=\"low\">Low</option>\n                                        </select>\n                                    </div>\n\n                                </div><br></br>\n\n                                <div className=\"row\">\n                                    <div className='col-12 col-md-5 add-button__column'>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary btn-sm btn-block\"\n                                            onClick={handleAddClick}\n                                        >Add to-do</button>\n                                    </div>\n                                </div>\n\n                                <div className=\"earthquake-alert\">\n                                    <Bootbox show={showAlert_add}\n                                        type={\"alert\"}\n                                        message={\"You have added a new task below.\"}\n                                        onClose={handleClose_add} />\n                                </div>\n\n                            </form >\n\n                        </div>\n\n\n                    </div>\n                </div>\n            </header>\n        </Fragment>\n\n    );\n}\n\nexport default Header;","import React, { Fragment, useState } from 'react';\n//fragemnt is an invisable div\nimport './TaskItem.css';\n\nfunction TaskItem(props) {\n\n    function handleDoneClick() {\n        // console.log('The done button has been clicked!');\n        props.completeTask(props.id);\n    }\n\n    const [dueDate, setDueDate] = useState(\"\");\n    function handleDateChange(event) {setDueDate(event.target.value);}\n\n    return (\n        <div className={`task-item ${props.priority}`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-7\">\n                    <p><strong>{props.text}</strong></p>\n                </div>\n\n                <div className=\"col-12 col-md-2 date\">\n                    <p className = \"date\">{new Date(props.dueDate).toDateString()}</p>\n                </div>\n\n                <div className=\"col-12 col-md-3 doneDeleteButtons\">\n                {/* <button\n                        type=\"button\"\n                        className=\"btn btn-outline-dark\"\n                        defaultValue={props.currentDueDate}\n                        onChange={handleDateChange}\n                        > change date </button> */}\n                    {!props.completed &&\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-outline-dark\"\n                            onClick={handleDoneClick}> done</button>}\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-outline-dark\"\n                        onClick={() => props.deleteTask(props.id)}> delete </button>\n                   \n                </div>\n            </div>\n        </div >\n\n    );\n}\n\nexport default TaskItem;\n\n","import React from 'react';\nimport './NextWeek.css';\n\nfunction NextWeek(props) {\n    return (\n        <div className={`task-item ${props.priority}`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-7\">\n                    <p><strong>{props.text}</strong></p>\n                </div>\n                <div className=\"col-12 col-md-2 dateBox\">\n                    <p>{new Date(props.dueDate).toDateString()} </p>\n                </div>\n                <div className=\"col-12 col-md-3 doneDeleteButtons\">\n                    <button \n                    type=\"button\" \n                    className=\"btn btn-outline-dark\"\n                    onClick={ () =>props.completeTask(props.id)}>done</button>\n                    <button \n                    type=\"button\" \n                    className=\"btn btn-outline-dark\"\n                    onClick={ () =>props.deleteTask(props.id)}>delete</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NextWeek;","import React from 'react';\nimport './ThisWeekH.css';\n\nfunction ThisWeekH() {\n\n    return (\n        \n        <h3>THIS WEEK's to-do's</h3>\n    );\n}\n\nexport default ThisWeekH;\n\n","import React from 'react';\nimport './AllTodo.css';\n\nfunction AllTodo(props) {\n    return (\n        \n        <div className={`task-item ${props.priority}`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-7\">\n                    <p><strong>{props.text}</strong></p>   \n                </div>\n                <div className=\"col-12 col-md-2 dateBox\">\n                    <p>{new Date(props.dueDate).toDateString()} </p>\n                </div>\n                <div className=\"col-12 col-md-3 doneDeleteButtons\">\n                <button \n                type=\"button\" \n                className=\"btn btn-outline-dark\"\n                onClick={ () =>props.completeTask(props.id)}>done</button>\n \n                <button \n                type=\"button\" \n                className=\"btn btn-outline-dark\"\n                onClick={ () =>props.deleteTask(props.id)}>delete</button>\n                </div>\n            </div>\n        </div >\n    );\n}\n\nexport default AllTodo;","import React from 'react';\n\n\nfunction AllTodoH() {\n    return (\n        \n        <h3>ALL FUTURE to-do's </h3>\n    );\n}\n\nexport default AllTodoH;","import React from 'react';\nimport './Done.css';\n\nfunction Done(props) {\n\n    function handleUndoClick() {\n        // console.log('The done button has been clicked!');\n        props.undoTask(props.id);\n    }\n\n    return (\n\n        <div className=\"task-item done-item\">\n            <div className=\"row\">\n                <div className=\"col-9 col-md-7\">\n                    <div className={`done-item ${props.priority}`}>\n                        <p className=\"Done_text\">{props.text}</p>\n                    </div>\n                </div>\n                {/* <div className=\"col-4 col-md-3\">\n                    <div className={`done-item ${props.modifier}`}>\n                        <p className=\"Done_text\">{props.dueDate}</p>\n                    </div>\n                </div> */}\n                <div className=\"col-2 col-md-3 doneDeleteButtons\">\n                {props.completed &&\n                <button \n                        type=\"button\" \n                        className=\"btn btn-outline-dark\"\n                        onClick={handleUndoClick}>undo</button>}\n                <button\n                        type=\"button\"\n                        className=\"btn btn-outline-dark\"\n                        onClick={() => props.deleteTask(props.id)}> delete </button>\n                </div>  \n            </div>\n        </div >\n    );\n}\n\nexport default Done;","import React from 'react';\n\nfunction DoneH() {\n    return (  \n        <h3>ALL DONE! You smashed it!</h3>\n    );\n}\n\nexport default DoneH;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n    return (\n        <footer className=\"text-center\">\n                <p><a href=\"#header\">\n                    Nip back to the top of the page</a></p>\n        </footer>\n\n    );\n}\n\n\nexport default Footer;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { BrowserRouter as Router, Route, Switch, } from 'react-router-dom';\n// import { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\n\nimport Header from \"./Header/header\"\nimport TaskItem from \"./TaskItem/TaskItem\"\nimport NextWeek from \"./NextWeek/NextWeek\"\nimport ThisWeekH from \"./ThisWeekH/ThisWeekH\"\nimport AllTodo from \"./AllTodo/AllTodo\"\nimport AllTodoH from \"./AllTodoH/AllTodoH\"\nimport Done from \"./Done/Done\"\nimport DoneH from \"./DoneH/DoneH\"\nimport Footer from \"./Footer/Footer\"\n\n\nfunction App() {\n  // const tasks = useState() []; //what is that state\n  // const setTasks =useState()[1]; //function allows me to update that state\n  // const [tasks, setTasks] = useState([\n  //   { text: \"Look up isBefore and momentjs.com\", completed: false, dueDate: \"2020-05-20\", priority: \"high\", id: uuidv4() },\n  //   { text: \"try and order you lists by date\", completed: false, dueDate: \"2020-05-20\", priority: \"high\", id: uuidv4() },\n  // ]);\n\n  const [tasks, setTasks] = useState();\n  useEffect(() => {\n    axios.get('https://djlfzi1od5.execute-api.eu-west-2.amazonaws.com/dev/tasks')\n      .then(\n        response => {\n          console.log(response.data);\n          setTasks(response.data.tasks);\n        })\n      .catch(\n        (error) => {\n          console.log(\"error fetch data this is the error that request has given\", error)\n        })\n  }, []);\n\n  // //trying to get dates to be sorted in order has to be here else it does not sort the original state above.\n  tasks && tasks.sort(function (a, b) {\n    return new Date(a.dueDate) - new Date(b.dueDate);\n  });\n  //making a variable that tells us the date of the last day of THIS week\n  let today = new Date(); //this is todays date and time\n  let first = today.getDate() - today.getDay() + 1; // First day is the day of the month - the day of the week\n  let last = first + 6; // last day is the first day + 6\n  let firstday = new Date(today.setDate(first));\n  let lastday = new Date(today.setDate(today.getDate() + 6));\n  let dd = String(lastday.getDate()).padStart(2, '0');\n  let mm = String(lastday.getMonth() + 1).padStart(2, '0'); //January is 0!\n  let yyyy = lastday.getFullYear();\n  let lastDayOfWeek = yyyy + \"-\" + mm + \"-\" + dd;\n\n  //making a variable to tell us the date of the last day of NEXT week\n  let lastdayNW = new Date(today.setDate(today.getDate() + 13));\n  let ddNW = String(lastdayNW.getDate()).padStart(2, '0');\n  let mmNW = String(lastdayNW.getMonth() + 1).padStart(2, '0');\n  let yyyyNW = lastdayNW.getFullYear();\n  let lastDayOfWeekNW = yyyyNW + \"-\" + mmNW + \"-\" + ddNW;\n\n  const twTasks = tasks && tasks.filter(task => !task.completed && task.currentDueDate <= lastDayOfWeek);\n  // this weeks tasks so looking at if NOT DONE and in a certain date range\n  const nwTasks = tasks && tasks.filter(task => !task.completed && task.currentDueDate > lastDayOfWeek\n    && task.currentDueDate <= lastDayOfWeekNW);\n  // this weeks tasks so looking at if NOT DONE and in a certain date range\n  const allActiveTasks = tasks && tasks.filter(task => !task.completed);\n  //look through array of ALLTASKS and if the task if false keep it\n  const doneTasks = tasks && tasks.filter(task => task.completed);\n\n\n  //function to delete a task\n  function deleteTask(id) {\n    //look through all tasks and find where task.todoId===id if it IS === remove that task\n    //if it return TRUE it keeps it, if false it removes it\n    //then update TASK STATE\n    // setTasks(updatedTasks);\n\n    axios.delete(`https://djlfzi1od5.execute-api.eu-west-2.amazonaws.com/dev/tasks/${id}`)\n      .then(response => {\n        const updatedTasks = tasks && tasks.filter(task => task.todoId !== id);\n        console.log(response.data);\n        setTasks(updatedTasks);\n      })\n      .catch(error => { console.log(\"can't delete the task\", error) })\n  }\n\n  function addTask(text, dueDate, priority) {\n    //get a copy of the tasks that are aready there, add a new task into this array, update the task state\n    const newTask = {\n      text: text,\n      completed: false,\n      deleted: false,\n      currentDueDate: dueDate,\n      priority: priority,\n      // todoId: uuidv4()\n    }\n    axios.post('https://djlfzi1od5.execute-api.eu-west-2.amazonaws.com/dev/tasks', newTask)\n      .then(\n        //If the request is successful, get the task id and add it to the new task object\n        (response) => {\n          newTask.todoId = response.data.task[0].todoId;\n          console.log(newTask);\n          const updatedTasks = [...tasks, newTask];\n          setTasks(updatedTasks);\n          console.log(tasks);\n        }\n      )\n      .catch(error => {\n        console.log('Error adding a task', error)\n      })\n  }\n  console.log(tasks);\n\n  function completeTask(id) {\n    //look through all tasks and find where task.todoId===id, if it is change completed: true, if it IS then add to updated task state\n    const updatedTasks = tasks && tasks.map(task => {\n      if (task.todoId === id) {\n        task.completed = 1;\n      } return task;\n    });\n\n    for (let i = 0; i < updatedTasks.length; i++) {\n      // const updatedTask = tasks.find(task => task.todoId === id);\n      axios.put(`https://djlfzi1od5.execute-api.eu-west-2.amazonaws.com/dev/tasks/${updatedTasks[i].todoId}`, updatedTasks[i])\n        .then(response => {\n          console.log(\"task checked as complete\")\n        })\n        .catch(error => {\n          console.log(\"can't update the task\", error);\n        })\n    }\n    setTasks(updatedTasks);\n  }\n\n  function undoTask(id) {\n    //look through all tasks and find where task.todoId===id, if it is change completed: true, if it IS then add to updated task state\n    const updatedTasks_undo = tasks && tasks.map(task => {\n      if (task.todoId === id) {\n        task.completed = 0;\n      } return task;\n    });\n\n    for (let i = 0; i < updatedTasks_undo.length; i++) {\n      // const updatedTask = tasks.find(task => task.todoId === id);\n      axios.put(`https://djlfzi1od5.execute-api.eu-west-2.amazonaws.com/dev/tasks/${updatedTasks_undo[i].todoId}`, updatedTasks_undo[i])\n        .then(response => {\n          console.log(\"task checked as complete\")\n        })\n        .catch(error => {\n          console.log(\"can't update the task\", error);\n        })\n    }\n    setTasks(updatedTasks_undo);\n  }\n\n  return (\n    <Router>\n      <div className=\"Container\">\n        <div className=\"App\">\n\n          <Route path=\"/AllTodo\" component={AllTodo} exact />\n\n          <Header addTask={addTask} />\n          <br></br>\n          <ThisWeekH />\n          <div>\n            {twTasks && twTasks.map((tasks) => {\n              return <TaskItem\n                deleteTask={deleteTask}\n                completeTask={completeTask}\n                key={tasks.text}\n                text={tasks.text}\n                dueDate={tasks.currentDueDate}\n                completed={tasks.completed}\n                priority={tasks.priority}\n                id={tasks.todoId} />\n            })}\n          </div>\n          <br></br>\n          <br></br>\n          <h3>NEXT WEEK's to-do's</h3>\n          <div>\n            {nwTasks && nwTasks.map((tasks) => {\n              return <NextWeek\n                deleteTask={deleteTask}\n                completeTask={completeTask}\n                key={tasks.text}\n                text={tasks.text}\n                dueDate={tasks.currentDueDate}\n                completed={tasks.completed}\n                priority={tasks.priority}\n                id={tasks.todoId} />\n            })}\n          </div>\n          <br></br>\n          <br></br>\n          <AllTodoH />\n          {allActiveTasks && allActiveTasks.map((tasks) => {\n            return <AllTodo\n              deleteTask={deleteTask}\n              completeTask={completeTask}\n              key={tasks.text}\n              text={tasks.text}\n              dueDate={tasks.currentDueDate}\n              completed={tasks.completed}\n              priority={tasks.priority}\n              id={tasks.todoId} />\n          })}\n          <div>\n          </div>\n          <br></br>\n          <br></br>\n          <DoneH />\n          <div>\n            {doneTasks && doneTasks.map((tasks) => {\n              return <Done\n                deleteTask={deleteTask}\n                undoTask={undoTask}\n                key={tasks.text}\n                text={tasks.text}\n                completed={tasks.completed}\n                priority={tasks.priority}\n                id={tasks.todoId} />\n            })}\n          </div>\n          <br></br>\n          <br></br>\n          <Footer />\n        </div>\n      </div>\n      </Router>         \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}