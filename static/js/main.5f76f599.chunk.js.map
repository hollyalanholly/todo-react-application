{"version":3,"sources":["Header/header.js","TaskItem/TaskItem.js","NextWeek/NextWeek.js","ThisWeekH/ThisWeekH.js","AllTodo/AllTodo.js","AllTodoH/AllTodoH.js","Done/Done.js","DoneH/DoneH.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","date","Date","toDateString","className","id","data-toggle","type","name","checked","placeholder","selected","value","TaskItem","priority","text","dueDate","completed","NextWeek","ThisWeekH","AllTodo","AllTodoH","Done","DoneH","Footer","href","App","useState","tasks","today","first","getDate","getDay","lastday","setDate","dd","String","padStart","mm","getMonth","lastDayOfWeek","getFullYear","lastdayNW","ddNW","mmNW","lastDayOfWeekNW","twTasks","filter","task","nwTasks","allActiveTasks","doneTasks","map","key","allTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f76f599.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header(props) {\n\n    const date = new Date().toDateString();\n\n    return (\n        <header>\n\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n\n                    <div className=\"col-lg col-lg-5 header-toggle\" id=\"header\">\n\n                        <div className=\"row header-toggle__row\">\n                            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                                <label className=\"btn btn-secondary toggler active\">\n                                    <input type=\"radio\" name=\"options\" id=\"option1\" /> All to'do's\n                                </label>\n                                <label className=\"btn btn-secondary toggler\">\n                                    <input type=\"radio\" name=\"options\" id=\"option2\" />Next wk to-do's\n                                </label>\n                                <label className=\"btn btn-secondary toggler\">\n                                    <input type=\"radio\" name=\"options\" id=\"option2\" checked />This wk to-do's\n                                </label>\n                            </div>\n                            <br></br>\n                        </div>\n                        <br></br>\n                        <div className=\"row-2\">\n                            <h1> Holly's Mega\n                            To-do List</h1><br></br>\n                        </div>\n\n                        <div className=\"row-date\">\n                            <h2><strong>{date}</strong></h2><br></br>\n                        </div>\n\n\n                    </div>\n\n                    <div className=\"col-lg col-lg-7\">\n                        <form className=\"new-todo-container\">\n                            <div className=\"row\">\n                                <div className='col-12'>\n                                    <input type=\"text\" className=\"form-control input-lg\" placeholder=\"To do...\" />\n                                </div>\n                            </div><br></br>\n\n                            <div className=\"row\">\n                                <div className=\"col-12 col-md-5\">\n                                    <input id=\"due-date\" type=\"date\" className=\"form-control\" placeholder=\"Due Date\" />\n                                </div>\n                            </div>\n                            <br></br>\n                            <div className=\"row\">\n                                <div className='col-12 col-md-5'>\n                                    <select className=\"custom-select mr-sm-2\" id=\"inlineFormCustomSelect\">\n                                        <option selected>Priority...</option>\n                                        <option id=\"high\" value=\"1\">High</option>\n                                        <option id=\"medium\" value=\"2\">Medium</option>\n                                        <option id=\"low\" value=\"3\">Low</option>\n                                    </select>\n                                </div>\n\n                            </div><br></br>\n\n                            <div className=\"row\">\n                            <div className='col-12 col-md-5 add-button__column'>\n                                    <button type=\"button\" className=\"btn btn-secondary btn-sm btn-block\">Add to-do</button>\n                                </div>\n                            </div>\n                        </form >\n\n                    </div>\n\n\n                </div>\n            </div>\n        </header>\n\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './TaskItem.css';\n\nfunction TaskItem(props) {\n    return (\n        <div className={`task-item ${props.priority}`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6\">\n                        <p>{props.text}</p>\n                </div>\n                <div className=\"col-6 col-md-3\">\n                        <input id=\"due-date\" type=\"date\" className=\"form-control\" value={props.dueDate} />\n                </div>\n                <div className=\"col-6 col-md-3\">\n                    {props.completed === false && <button type=\"button\" className=\"btn btn-secondary\">done</button>}\n                    <button type=\"button\" className=\"btn btn-secondary\">delete</button>\n            </div>\n        </div>\n        </div >\n        \n    );\n}\n\nexport default TaskItem;\n\n","import React from 'react';\nimport './NextWeek.css';\n\nfunction NextWeek(props) {\n    return (\n        <div className={`task-item ${props.priority}`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6\">\n                    <p>{props.text}</p>\n                </div>\n                <div className=\"col-6 col-md-3\">\n                    <input id=\"due-date\" type=\"date\" className=\"form-control\" value={props.dueDate} />\n                </div>\n                <div className=\"col-6 col-md-3\">\n                    {props.completed === false && <button type=\"button\" className=\"btn btn-secondary\">done</button>}\n                    <button type=\"button\" className=\"btn btn-secondary\">delete</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NextWeek;","import React from 'react';\nimport './ThisWeekH.css';\n\nfunction ThisWeekH() {\n\n    return (\n        \n        <h3>THIS WEEK's to-do's</h3>\n    );\n}\n\nexport default ThisWeekH;\n\n","import React from 'react';\nimport './AllTodo.css';\n\nfunction AllTodo(props) {\n    return (\n        \n        <div className={`task-item ${props.priority}`}>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6\">\n                    <p>{props.text}</p>   \n                </div>\n                <div className=\"col-6 col-md-3\">\n                    <input id=\"due-date\" type=\"date\" className=\"form-control\" value={props.dueDate} />\n                </div>\n                <div className=\"col-6 col-md-3\">\n                <button type=\"button\" className=\"btn btn-secondary\">done</button>\n \n                <button type=\"button\" className=\"btn btn-secondary\">delete</button>\n                </div>\n            </div>\n        </div >\n    );\n}\n\nexport default AllTodo;","import React from 'react';\n\n\nfunction AllTodoH() {\n    return (\n        \n        <h3>ALL FUTURE to-do's </h3>\n    );\n}\n\nexport default AllTodoH;","import React from 'react';\nimport './Done.css';\n\nfunction Done(props) {\n    return (\n\n        <div className=\"task-item done-item\">\n            <div className=\"row\">\n                <div className=\"col-9 col-md-9\">\n                    <div className={`done-item ${props.priority}`}>\n                        <p className=\"Done_text\">{props.text}</p>\n                    </div>\n                </div>\n                {/* <div className=\"col-4 col-md-3\">\n                    <div className={`done-item ${props.modifier}`}>\n                        <p className=\"Done_text\">{props.dueDate}</p>\n                    </div>\n                </div> */}\n                <div className=\"col-2 col-md-1\">\n                <button type=\"button\" className=\"btn btn-secondary\">undo</button>\n\n                </div>  \n            </div>\n        </div >\n    );\n}\n\nexport default Done;","import React from 'react';\n\nfunction DoneH() {\n    return (  \n        <h3>ALL DONE! You smashed it!</h3>\n    );\n}\n\nexport default DoneH;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n    return (\n        <footer className=\"text-center\">\n                <p><a href=\"#header\">\n                    Nip back to the top of the page</a></p>\n        </footer>\n\n    );\n}\n\n\nexport default Footer;\n\n{/* <a href=\"https://<user.name>.github.io/<repo.name>/about.html\" title=\"About Me\">About Me</a> */}","import React, { useState } from 'react';\n\n\nimport Header from \"./Header/header\"\nimport TaskItem from \"./TaskItem/TaskItem\"\nimport NextWeek from \"./NextWeek/NextWeek\"\nimport ThisWeekH from \"./ThisWeekH/ThisWeekH\"\nimport AllTodo from \"./AllTodo/AllTodo\"\nimport AllTodoH from \"./AllTodoH/AllTodoH\"\nimport Done from \"./Done/Done\"\nimport DoneH from \"./DoneH/DoneH\"\nimport Footer from \"./Footer/Footer\"\n\n\nfunction App() {\n  // const tasks = useState() []; //what is that state\n  // const setTasks =useState()[1]; //function allows me to update that state\n  //Destructuring method, first thing we will store\n\n  const [tasks, SetTasks] = useState([\n    { text: \"Wash Alan\", completed: false, dueDate: \"2020-05-17\", priority: \"high\" },\n    { text: \"Find the cat\", completed: false, dueDate: \"2020-05-17\", priority: \"medium\" },\n    { text: \"Take a secret nap\", completed: false, dueDate: \"2020-05-24\", priority: \"low\" },\n    { text: \"Make a white Russian\", completed: true, dueDate: \"2020-05-01\", priority: \"doneColor\" },\n    { text: \"Feed children\", completed: true, dueDate: \"2020-06-07\", priority: \"doneColor\" },\n    { text: \"Shave little shorts into Jeffery the cat\", completed: false, dueDate: \"2020-07-07\", priority: \"low\"},\n    { text: \"Eat Cheese\", completed: true, dueDate: \"2020-06-07\", priority: \"doneColor\" },\n    { text: \"Remove and cut up the entire back garden hedge\", completed: true, dueDate: \"2020-06-07\", priority: \"doneColor\" },\n    { text: \"Get into bin\", completed: true, dueDate: \"2020-06-07\", priority: \"doneColor\" },\n    { text: \"Buy a reciprocal saw\", completed: false, dueDate: \"2020-04-29\", priority: \"medium\" },\n    { text: \"Paint woodwork\", completed: false, dueDate: \"2020-07-29\", priority: \"low\" },\n  ]);\n\n  //making a variable that tells us the date of the last day of THIS week\n  let today = new Date(); //this is todays date and time\n  let first = today.getDate() - today.getDay()+1; // First day is the day of the month - the day of the week\n  let last = first + 6; // last day is the first day + 6\n  let firstday = new Date(today.setDate(first)); \n  let lastday = new Date(today.setDate(today.getDate()+6));\n  let dd =String(lastday.getDate()).padStart(2, '0');\n  let mm = String(lastday.getMonth() + 1).padStart(2, '0'); //January is 0!\n  let yyyy =lastday.getFullYear(); \n  let lastDayOfWeek = yyyy +\"-\" + mm + \"-\"+dd;\n\n  //making a variable to tell us the date of the last day of NEXT week\n  let lastdayNW = new Date(today.setDate(today.getDate()+13));\n  let ddNW =String(lastdayNW.getDate()).padStart(2, '0');\n  let mmNW = String(lastdayNW.getMonth() + 1).padStart(2, '0'); \n  let yyyyNW =lastdayNW.getFullYear(); \n  let lastDayOfWeekNW = yyyyNW +\"-\" + mmNW + \"-\"+ddNW;\n\n\n  const twTasks = tasks.filter(task => !task.completed && task.dueDate <= lastDayOfWeek);\n  // this weeks tasks so looking at if NOT DONE and in a certain date range\n\n  const nwTasks = tasks.filter(task => !task.completed && task.dueDate > lastDayOfWeek \n    && task.dueDate<=lastDayOfWeekNW);\n  // this weeks tasks so looking at if NOT DONE and in a certain date range\n\n  const allActiveTasks = tasks.filter(task => !task.completed);\n  //look through array of ALLTASKS and if the task if false keep it\n\n  const doneTasks = tasks.filter(tasks => tasks.completed);\n\n  return (\n    <div className=\"Container\">\n      <div className=\"App\">\n        <Header />\n        <br></br>\n        <ThisWeekH />\n        <div>\n          {twTasks.map((tasks) => <TaskItem key={tasks.text} text={tasks.text} dueDate={tasks.dueDate}\n            completed={tasks.completed} priority={tasks.priority} />)}\n          {/* <TaskItem text=\"feed Jeff\" date=\"01/05/2020\" modifier=\"high\" />\n          <TaskItem text=\"be fabulous\" date=\"01/06/2020\" modifier=\"medium\" /> */}\n        </div>\n        <br></br>\n        <br></br>\n        <h3>NEXT WEEK's to-do's</h3>\n        <div>\n          {nwTasks.map((tasks) => <NextWeek key={tasks.text} text={tasks.text} dueDate={tasks.dueDate}\n            completed={tasks.completed} priority={tasks.priority} />)}\n        </div>\n        <br></br>\n        <br></br>\n        <AllTodoH />\n        {allActiveTasks.map((tasks) => <AllTodo key={tasks.text} text={tasks.text} dueDate={tasks.dueDate}\n          completed={tasks.completed} priority={tasks.priority} />)}\n        <div>\n          {/* <AllTodo className=\"item1\" text=\"feed Jeff\" date=\"01/05/2020\" modifier=\"high\" />>\n          <AllTodo text=\"eat some cheese\" date=\"04/06/2020\" modifier=\"low\" /> */}\n        </div>\n        <br></br>\n        <br></br>\n        <DoneH />\n        <div>\n          {/* <Done text=\"Change out of jogging bottoms\" date=\"08/04/2020\" modifier=\"doneColor\"/> */}\n          {doneTasks.map((allTasks) => <Done key={allTasks.text} text={allTasks.text}\n            completed={allTasks.completed} priority={allTasks.priority} />)}\n        </div>\n        <br></br>\n        <br></br>\n        <Footer />\n      </div>\n    </div>\n\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}